{"name":"Eidetic","tagline":"alternate mnesia interface for elixir","body":"# Eidetic /aɪˈdɛtɪk/ [![Build Status](https://travis-ci.org/barbuza/eidetic.png)](https://travis-ci.org/barbuza/eidetic)\r\n\r\nalternate mnesia interface for `elixir`\r\n\r\n\r\n### define\r\n```elixir\r\ndefrecord User, [id: nil, name: nil, email: nil, is_admin: false, perms: []] do\r\n  use Eidetic\r\n\r\n  validate_with :perms, function(is_list/1)\r\n\r\n  @index_on :is_admin\r\n  @storage :memory\r\n\r\n  validate_with :id, function(is_integer/1)\r\n\r\n  validate :name do\r\n    non_empty_string(name)\r\n  end\r\n\r\n  validate_presence_of :email\r\n\r\nend\r\n```\r\nvalid storage types are `memory`, `disk` and `memory_and_disk`\r\n\r\n`validate` exposes value as field name\r\n\r\ncurrently, only `non_empty_string/1` is custom validator available\r\n\r\n`validate_presence_of` will check if `value !== nil`\r\n\r\n\r\n### create schema\r\n```elixir\r\nUser.Meta.create!\r\n```\r\n\r\n### create records\r\n```elixir\r\nUser.new! id: 1, name: \"foo\", email: \"foo@gmail.com\"\r\nUser[id: 2, name: \"spam\", email: \"spam@me.com\", is_admin: true].create!\r\n```\r\n\r\n`create!` and `new!` will check if no other records stored with given pkey value\r\n\r\n\r\n### make queries\r\n```elixir\r\nUser.get 1\r\nUser.find User.match_spec.is_admin(true)\r\n```\r\n\r\neidetic will try to utilize first specified index in match spec\r\n\r\n\r\n###alter data\r\n\r\n```elixir\r\nUser.get(1).email(\"some_new_email@host.com\").save!\r\nUser.get(1).change_id!(2)\r\nUser.get(2).delete!\r\n```\r\n\r\n`change_#{pkey}!` will check if no record is stored for a pk given value, it will also validate new given value\r\n\r\n`save!` will just invoke `:mnesia.write` with no uniq checks\r\n\r\n###use `:mnesia.select` with no pain in the ass\r\n```elixir\r\nrequire User\r\n\r\nUser.select do\r\n  (User.id == 10) or (User.id == 20)\r\nend\r\n\r\nUser.select User.id do\r\n  User.is_admin == true\r\n  User.id < 1000\r\nend\r\n\r\nUser.select do\r\n  hd(User.perms) == :editor\r\nend\r\n\r\nUser.select do\r\n  startswith \"some_prefix\", User.name\r\nend\r\n```\r\n\r\nlook at `lib/eidetic/select.ex` for list of functions / operators available\r\n\r\n`select` will try to use `find` if possible (if there are only equality checks)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}